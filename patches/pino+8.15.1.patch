diff --git a/node_modules/pino/lib/caller.js b/node_modules/pino/lib/caller.js
index f39e087..a65bb2e 100644
--- a/node_modules/pino/lib/caller.js
+++ b/node_modules/pino/lib/caller.js
@@ -7,11 +7,23 @@ function noOpPrepareStackTrace (_, stack) {
 module.exports = function getCallers () {
   const originalPrepare = Error.prepareStackTrace
   Error.prepareStackTrace = noOpPrepareStackTrace
-  const stack = new Error().stack
+  let stack = new Error().stack
   Error.prepareStackTrace = originalPrepare
 
   if (!Array.isArray(stack)) {
-    return undefined
+    if (global.Bun) {
+      // This is a hacky workaround for Bun runtime 1.0.2
+      stack = stack.split('\n').map((line) => {
+        return {
+          getFileName: () => {
+            const omittedBeginning = line.split(' (/')[1]
+            return omittedBeginning ? omittedBeginning.split(':')[0] : null
+          }
+        }
+      })
+    } else {
+      throw new Error('could not get callers') // we expect to get an array of Callsite objects
+    }
   }
 
   const entries = stack.slice(2)
diff --git a/node_modules/pino/lib/transport.js b/node_modules/pino/lib/transport.js
index d59b897..02a38f8 100644
--- a/node_modules/pino/lib/transport.js
+++ b/node_modules/pino/lib/transport.js
@@ -71,11 +71,12 @@ function flush (stream) {
 }
 
 function transport (fullOptions) {
-  const { pipeline, targets, levels, dedupe, options = {}, worker = {}, caller = getCallers() } = fullOptions
+  const { pipeline, targets, levels, dedupe, options = {}, worker = {}, caller = getCallers() || [] } = fullOptions
 
   // Backwards compatibility
   const callers = typeof caller === 'string' ? [caller] : caller
 
+
   // This will be eventually modified by bundlers
   const bundlerOverrides = '__bundlerPathsOverrides' in globalThis ? globalThis.__bundlerPathsOverrides : {}
 
