diff --git a/node_modules/prisma-typegraphql-types-generator/dist/generator.js b/node_modules/prisma-typegraphql-types-generator/dist/generator.js
index 796d0f0..9e194f3 100644
--- a/node_modules/prisma-typegraphql-types-generator/dist/generator.js
+++ b/node_modules/prisma-typegraphql-types-generator/dist/generator.js
@@ -49,6 +49,10 @@ const { version } = require('../package.json');
         version,
     }),
     onGenerate: async (options) => {
+        if (process.env.SKIP_GEN_GRAPHQL) {
+            console.warn('Skipping Graphql models generation')
+            return
+        }
         const extractedData = (0, extractFieldsModifications_1.ExtractFieldsModifications)(options.datamodel);
         const splitScalars = !!options.generator.config.splitScalarAndObjectTypeFields;
         const exportedNameSuffix = options.generator.config.exportedNameSuffix || '';
@@ -222,12 +226,12 @@ const { version } = require('../package.json');
             }
             if (scalarFields.join('\n').includes('GraphQLScalars.')) {
                 installPackage(options.generator.config.useYarn, 'graphql-scalars');
-                imports.push((0, import_1.IMPORT_TEMPLATE)(`GraphQLScalars`, `graphql-scalars`));
+                imports.push((0, import_1.IMPORT_TEMPLATE)(`* as GraphQLScalars`, `graphql-scalars`));
             }
             const classChanges = (0, restoreClassChanges_1.restoreClassChanges)(writeLocation);
             const importsChanges = (0, restoreImportsSection_1.restoreImportsChanges)(writeLocation, modelName);
             if (!importsChanges) {
-                imports.push(`\n@ObjectType()`);
+                imports.push(`\n@ObjectType("${modelName.replace('GQL_', '')}")\n`);
             }
             const actualImportsThatChanged = importsChanges
                 ? (await (0, format_1.format)(importsChanges
diff --git a/node_modules/prisma-typegraphql-types-generator/dist/templates/model.js b/node_modules/prisma-typegraphql-types-generator/dist/templates/model.js
index 10a3ecb..4dd023e 100644
--- a/node_modules/prisma-typegraphql-types-generator/dist/templates/model.js
+++ b/node_modules/prisma-typegraphql-types-generator/dist/templates/model.js
@@ -2,7 +2,7 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.MODEL_TEMPLATE = void 0;
 const MODEL_TEMPLATE = (CLASSNAME, FIELDS, CUSTOMFIELDS = '  // skip overwrite ðŸ‘‡\n}', EXTENDS = '') => {
-    return `${EXTENDS.length > 0 ? '@ObjectType()\n' : ''}export class ${CLASSNAME}${EXTENDS} {
+    return `${EXTENDS.length > 0 ? `@ObjectType("${CLASSNAME.replace('GQL_', '')}")\n` : ''}export class ${CLASSNAME}${EXTENDS} {
 ${FIELDS}
 ${CUSTOMFIELDS}`;
 };
diff --git a/node_modules/prisma-typegraphql-types-generator/dist/utils/extractFieldsModifications.js b/node_modules/prisma-typegraphql-types-generator/dist/utils/extractFieldsModifications.js
index ae9c747..40d9a01 100644
--- a/node_modules/prisma-typegraphql-types-generator/dist/utils/extractFieldsModifications.js
+++ b/node_modules/prisma-typegraphql-types-generator/dist/utils/extractFieldsModifications.js
@@ -4,10 +4,11 @@ exports.ExtractFieldsModifications = void 0;
 const ExtractFieldsModifications = (dataModel) => {
     let hideField = false;
     let privateField = false;
+    let relationField = false;
     let currentCodeBlock;
     const extractedData = [];
     dataModel.split('\n').forEach((line) => {
-        if (line.includes('@skip')) {
+        if (line.includes('@skip') ) {
             return (hideField = true);
         }
         else if (line.includes('@nullable')) {
@@ -23,6 +24,7 @@ const ExtractFieldsModifications = (dataModel) => {
             .split(' ')
             .filter((e) => e !== '')
             .map((e) => e.replace('\r', ''))[0];
+
         if (hideField) {
             extractedData.push({
                 fieldName,
