// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// https://github.com/YassinEldeeb/prisma-tgql-types-gen
generator PrismaTypeGraphQLTypesGenerator {
  provider           = "bunx prisma-typegraphql-types-generator"
  modelsOutput       = "./src/@generated/graphql/models" // Optional defaults to "./src/generated/models"
  enumsOutput        = "./src/@generated/graphql/enums" // Optional defaults to "./src/generated/enums"
  // useYarn            = true // Optional if you want `graphql-scalars` installation to be done via yarn defaults to "npm"
  // exportedNameSuffix = "GQL" // Optional if you want to add a suffix to the end of your exported class names and enums
  exportedNamePrefix = "GQL_" // Optional if you want to prefix your exported class names and enums
}

enum ImageType {
  SVG
  PNG
}

enum AlertChannel {
  PUSH
}

enum FlightVendor {
  FLIGHT_STATS
  AERO_DATA_BOX
}

enum ValueType {
  NUMBER
  STRING
  DATE
  BOOLEAN
}

enum FlightStatus {
  SCHEDULED
  DEPARTED
  DELAYED
  ARRIVED
  CANCELED
  ARCHIVED
  LANDED
}

model Airline {
  id String @id @default(uuid())

  name                 String
  iata                 String
  logoFullImageURL     String
  logoFullImageType    ImageType
  logoCompactImageURL  String
  logoCompactImageType ImageType
  isLowCost            Boolean

  @@unique([iata])
}

model Airport {
  id          String  @id @default(uuid())
  name        String
  iata        String
  timezone    String
  cityName    String
  cityCode    String
  countryCode String
  elevation   Int?
  countyName  String?
  state       String?
  latitude    Int
  longitude   Int

  OriginFlights      Flight[] @relation("origin")
  DestinationFlights Flight[] @relation("destination")

  @@unique([iata])
}

model City {
  id          String @id @default(uuid())
  name        String
  countryCode String
  code        String
  timezone    String
  latitude    Int
  longitude   Int

  @@unique([code])
}

model Country {
  id            String    @id @default(uuid())
  name          String
  isoCode       String
  dialCode      String
  flagImageURL  String
  flagImageType ImageType

  @@unique([isoCode])
  @@index([name])
}

model Flight {
  id          String        @id @default(uuid())
  FlightAlert FlightAlert[]

  origin      Airport @relation(references: [iata], fields: [originIata], name: "origin")
  destination Airport @relation(references: [iata], fields: [destinationIata], name: "destination")

  departureDate DateTime @db.Date

  airlineIata             String
  flightNumber            String
  vendor                  FlightVendor
  aircraftTailnumber      String?
  vendorResourceID        String?
  status                  FlightStatus
  totalDistanceKm         Int?         @default(0)
  originIata              String
  originGate              String?
  originTerminal          String?
  destinationIata         String
  destinationGate         String?
  destinationTerminal     String?
  destinationBaggageClaim String?
  scheduledGateDeparture  DateTime
  estimatedGateDeparture  DateTime
  actualGateDeparture     DateTime?
  scheduledGateArrival    DateTime
  estimatedGateArrival    DateTime
  actualGateArrival       DateTime?
  reconAttempt            Int?         @default(0)

  UserFlight      UserFlight[]
  FlightPositions FlightPosition[]
  FlightPlan      FlightPlan?

  @@unique([vendor, vendorResourceID])
  @@unique([airlineIata, flightNumber, originIata, destinationIata, departureDate])
  @@index([originIata])
  @@index([destinationIata])
}

model Aircraft {
  id          Int     @id @default(autoincrement())
  iata        String
  icao        String?
  name        String
  airlineIata String
  description String?
  tailNumber  String
  imageURL    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  AircraftPosition AircraftPosition?

  @@unique([tailNumber])
  @@index([icao])
  @@index([iata])
  @@index([airlineIata])
}

model AircraftPosition {
  id         Int      @id @default(autoincrement())
  aircraftID Int
  latitude   Int
  longitude  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Aircraft Aircraft @relation(fields: [aircraftID], references: [id])

  @@unique([aircraftID])
}

model FlightEvent {
  id               String  @id
  flightTimelineID String
  index            Int
  flightID         String
  description      String
  requireAlert     Boolean

  changedValueType ValueType?
  prevValueType    ValueType?
  changedValue     Json?
  prevValue        Json?
  timestamp        DateTime

  @@unique([flightID, flightTimelineID, index])
  @@index([flightTimelineID])
}

model FlightTimeline {
  id         String   @id
  flightID   String
  title      String
  index      Int
  source     String
  timestamp  DateTime
  hasAlerted Boolean  @default(false)

  @@unique([flightID, index])
}

model FlightPosition {
  id         Int    @id @default(autoincrement())
  flightID   String
  index      Int
  latitude   Int
  longitude  Int
  course     Int
  speedMph   Int
  vrateMps   Int
  altitudeFt Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Flight Flight @relation(references: [id], fields: [flightID])

  @@index([flightID])
}

model FlightPlan {
  id        Int    @id @default(autoincrement())
  flightID  String
  index     Int
  latitude  Int
  longitude Int

  Flight Flight @relation(references: [id], fields: [flightID])

  @@unique([flightID])
}

model FlightAlert {
  id        String         @id @default(uuid())
  flightID  String
  flight    Flight         @relation(fields: [flightID], references: [id])
  title     String
  body      String
  channel   AlertChannel[]
  receiptID String
  createdAt DateTime       @default(now())

  @@index([flightID])
}

model FlightPromptness {
  id              String       @id @default(uuid())
  airlineIata     String
  flightNumber    String
  originIata      String
  destinationIata String
  vendor          FlightVendor

  rating             Int
  onTimePercent      Int
  averageDelayTimeMs Int

  daysObserved      Int
  flightsObservered Int

  onTimeCount    Int
  lateCount      Int
  veryLateCount  Int
  excessiveCount Int
  cancelledCount Int
  divertedCount  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  @@unique([airlineIata, flightNumber, originIata, destinationIata])
  @@index([expiresAt])
  @@index([vendor])
}

model UserSchema {
  id String @id
}

model UserFlight {
  id          String   @id @default(uuid())
  userID      String
  flightID    String
  flight      Flight   @relation(fields: [flightID], references: [id])
  shouldAlert Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([flightID, userID])
}

model ScheduledJob {
  id           String @id @default(uuid())
  name         String
  lockDuration Int
  cronTime     String

  lastFailedReason String?
  lastFailedAt     DateTime?
  lastSucceedAt    DateTime?
  unlockAt         DateTime?
  nextRunAt        DateTime?
  lastRunAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([name])
}
