# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Aircraft {
  AircraftPositions: [AircraftPosition!]!
  airlineIata: String!
  createdAt: DateTimeISO!
  description: String
  firstFlight: DateTimeISO
  iata: String
  icao: String!
  id: Int!
  imageURL: String
  model: String!
  tailNumber: String!
  updatedAt: DateTimeISO!
}

type AircraftPosition {
  aircraftID: Int!
  airlineIata: String!
  altitude: Float
  createdAt: DateTimeISO!
  destinationIata: String!
  flightDate: Int!
  flightMonth: Int!
  flightNumber: String!
  flightYear: Int!
  id: Int!
  latitude: Float
  longitude: Float
  originIata: String!
  updatedAt: DateTimeISO!
}

type Airline {
  Flight: [Flight!]!
  iata: String!
  icao: String
  id: ID!
  isLowCost: Boolean
  logoCompactImageType: ImageType
  logoCompactImageURL: String
  logoFullImageType: ImageType
  logoFullImageURL: String
  name: String!
}

type Airport {
  Country: Country!
  cityCode: String!
  cityName: String!
  countryCode: String!
  countyName: String
  elevation: Int
  iata: String
  icao: String
  id: ID!
  latitude: Float!
  longitude: Float!
  name: String!
  state: String
  timezone: String!
}

type AirportTsaCheckPointHour {
  hour: Float!
  status: CheckPointStatus!
}

type AirportTsaCheckPointTerminal {
  checkpoints: [AirportTsaCheckPoints!]!
  terminalName: String!
}

type AirportTsaCheckPoints {
  checkPointName: String!
  hours: [AirportTsaCheckPointHour!]!
}

type AirportTsaWaitTime {
  dayOfWeek: Float!
  hour: Float!
  maxWaitMinute: Float!
  updatedAt: DateTimeISO!
}

type AirportWeather {
  airTemperatureCelsius: Int!
  airportIata: String!
  createdAt: DateTimeISO!
  date: Int!
  hour: Int!
  iconURL: String!
  id: ID!
  month: Int!
  precipitationAmountMillimeter: Int!
  status: String!
  updatedAt: DateTimeISO!
  vendor: String!
  windFromDirectionDegrees: Int!
  windSpeedMeterPerSecond: Int!
  year: Int!
}

enum CheckPointStatus {
  CLOSE
  OPEN
}

type Country {
  dialCode: String!
  flagImageType: ImageType
  flagImageURL: String
  id: ID!
  isoCode: String!
  name: String!
}

enum DateFormatType {
  AMERICAN
  WORLD
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type Flight {
  Airline: Airline!
  Destination: Airport!
  Origin: Airport!
  actualGateArrival: DateTimeISO
  actualGateDeparture: DateTimeISO
  aircraftTailNumber: String
  airlineIata: String!
  co2EmissionKgBusiness: Float
  co2EmissionKgEco: Float
  co2EmissionKgEconomy: Float
  co2EmissionKgFirst: Float
  createdAt: DateTimeISO!
  destinationBaggageClaim: String
  destinationGate: String
  destinationIata: String!
  destinationTerminal: String
  destinationUtcHourOffset: Int!
  durationMs: Float!
  estimatedGateArrival: DateTimeISO!
  estimatedGateDeparture: DateTimeISO!
  flightDate: Int!
  flightMonth: Int!
  flightNumber: String!
  flightYear: Int!
  id: ID!
  originGate: String
  originIata: String!
  originTerminal: String
  originUtcHourOffset: Int!
  progressPercent: Float!
  reconAttempt: Int
  remainingDurationMs: Float!
  scheduledGateArrival: DateTimeISO!
  scheduledGateDeparture: DateTimeISO!
  status: FlightStatus!
  totalDistanceKm: Int
  updatedAt: DateTimeISO!
}

type FlightPromptness {
  airlineIata: String!
  averageDelayTimeMs: Int
  cancelledCount: Int
  createdAt: DateTimeISO!
  daysObserved: Int
  destinationIata: String!
  divertedCount: Int
  excessiveCount: Int
  expiresAt: DateTimeISO!
  flightNumber: String!
  flightsObserved: Int
  id: ID!
  lateCount: Int
  onTimeCount: Int
  onTimePercent: Int
  originIata: String!
  rating: Int
  updatedAt: DateTimeISO!
  vendor: FlightVendor!
  veryLateCount: Int
}

enum FlightStatus {
  ARCHIVED
  ARRIVED
  CANCELED
  DELAYED
  DEPARTED
  LANDED
  SCHEDULED
}

enum FlightVendor {
  AERO_DATA_BOX
  FLIGHT_STATS
}

enum ImageType {
  PNG
  SVG
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum MeasurementType {
  AMERICAN
  METRIC
}

type Mutation {
  _sendFlightNotification(body: String!, data: JSON, flightID: String!, title: String!): Float!
  addUserFlight(flightID: String!): String!
  deleteUserFlight(flightID: String!): String!
  syncUser: Boolean!
  updateUserPreference(data: UpdateUserPreferenceInput!): Boolean!
}

type Query {
  aircraft(tailNumber: String!): Aircraft
  aircraftPosition(aircraftID: Float!): AircraftPosition
  airline(iata: String!): Airline!
  airlines: [Airline!]!
  airport(airportIata: String!): Airport!
  airportTsaCheckpointsStatus(airportIata: String!, dayOfWeek: Float!): [AirportTsaCheckPointTerminal!]
  airportTsaWaitTime(airportIata: String!): [AirportTsaWaitTime!]
  airportWeather(airportIata: String!, date: Int!, hour: Int!, month: Int!, year: Int!): AirportWeather!
  airportWeatherDay(airportIata: String!, date: Int!, month: Int!, year: Int!): [AirportWeather!]!
  flight(flightID: String!): Flight!
  flightPromptness(flightID: String!): FlightPromptness!
  flights(airlineIata: String!, date: Int!, flightNumber: String!, month: Int!, year: Int!): [Flight!]!
  randomFlight: Flight!
  user: User!
  userActiveFlights: [UserFlight!]!
  userArchivedFlights: [UserFlight!]!
  userFlight(flightID: String!): UserFlight
  userHasFlights: Boolean!
  userPreference: UserPreference!
}

input UpdateUserPreferenceInput {
  dateFormat: DateFormatType
  measurement: MeasurementType
}

type User {
  UserFlight: [UserFlight!]!
  UserPreference: UserPreference
  UserWaitList: [UserWaitList!]!
  avatarURL: String
  createdAt: DateTimeISO!
  displayName: String
  id: ID!
  isAnonymous: Boolean!
  lastSignInAt: DateTimeISO!
  updatedAt: DateTimeISO!
}

type UserFlight {
  Flight: Flight!
  createdAt: DateTimeISO!
  flightID: String!
  id: ID!
  shouldAlert: Boolean!
  updatedAt: DateTimeISO!
  userID: String!
}

type UserPreference {
  dateFormat: DateFormatType!
  id: ID!
  measurement: MeasurementType!
  userID: String!
}

type UserWaitList {
  createdAt: DateTimeISO!
  feature: String!
  id: ID!
  userID: String!
}